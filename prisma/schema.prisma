// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  MOVER
  MOVING_CUSTOMER
  MOVING_COMPANY
}

enum JobStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum AccountStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  firstName String
  lastName  String
  email     String @unique
  password  String

  Mover          Mover[]
  MovingCustomer MovingCustomer[]
  MovingCompany  MovingCompany[]
  Order          Order[]

  role Role @default(MOVING_CUSTOMER)

  hasUploadedDocuments Boolean @default(false)
  isCompanyVerified    Boolean @default(false)
  isEmailVerified      Boolean @default(false)
}

model Order {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  totalPrice   Float
  user         User           @relation(fields: [userId], references: [id])
  userId       Int
  service      Service        @relation(fields: [serviceId], references: [id])
  OrderDetails OrderDetails[]
  serviceId    Int
}

model Service {
  id                Int           @id @default(autoincrement())
  serviceName       String        @unique
  servicePrice      Float
  serviceMovers     Int
  serviceHours      Int
  serviceDesc       String
  serviceCounty     String
  serviceDisclaimer String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  serviceImg        String
  company           MovingCompany @relation(fields: [movingCompanyId], references: [id])
  movingCompanyId   Int
  Order             Order[]
}

model OrderDetails {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  startAddress            String
  endAddress              String
  state                   String
  city                    String
  zip                     String
  loading                 Boolean
  unloading               Boolean
  numberOfRooms           Int
  numberOfStairFlights    Int
  numberOfStairFloors     Int
  numberOfStairDimensions Int
  specialItems            String?
  notes                   String?
  latitude                String?
  longitude               String?

  order   Order @relation(fields: [orderId], references: [id])
  orderId Int
}

model Mover {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  drivingLicense String
  idCardImage    String

  applications Application[]
  user         User          @relation(fields: [userId], references: [id])
  userId       Int

  @@unique([userId, drivingLicense])
}

model MovingCustomer {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
}

model MovingCompany {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  idCardImage     String?
  ein             String?
  businessLicense String?
  sole            Boolean? @default(false)
  companyName     String?

  status   AccountStatus @default(PENDING)
  user     User          @relation(fields: [userId], references: [id])
  services Service[]
  jobs     Job[]
  userId   Int

  @@unique([userId, ein])
}

model Job {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  position    String
  rate        Float
  title       String
  county      String
  description String
  jobStatus   JobStatus @default(PENDING)

  company MovingCompany @relation(fields: [movingCompanyId], references: [id])

  applications    Application[]
  movingCompanyId Int

  @@unique([movingCompanyId, title])
}

model Application {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  applicantName     String
  coverLetter       String
  applicationStatus ApplicationStatus @default(PENDING)
  appliedAt         DateTime          @default(now())

  mover   Mover @relation(fields: [moverId], references: [id])
  job     Job   @relation(fields: [jobId], references: [id])
  moverId Int
  jobId   Int

  @@unique([moverId, jobId])
}
